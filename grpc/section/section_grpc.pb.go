// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: cmd/odas/grpc/section/section.proto

package section

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SectionDeductionService_TodaySectionDeductionDetail_FullMethodName = "/SectionDeductionService/TodaySectionDeductionDetail"
)

// SectionDeductionServiceClient is the client API for SectionDeductionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SectionDeductionServiceClient interface {
	// 获取今日分时预约
	TodaySectionDeductionDetail(ctx context.Context, in *TodaySectionDeductionRequest, opts ...grpc.CallOption) (*TodaySectionDeductionResponse, error)
}

type sectionDeductionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSectionDeductionServiceClient(cc grpc.ClientConnInterface) SectionDeductionServiceClient {
	return &sectionDeductionServiceClient{cc}
}

func (c *sectionDeductionServiceClient) TodaySectionDeductionDetail(ctx context.Context, in *TodaySectionDeductionRequest, opts ...grpc.CallOption) (*TodaySectionDeductionResponse, error) {
	out := new(TodaySectionDeductionResponse)
	err := c.cc.Invoke(ctx, SectionDeductionService_TodaySectionDeductionDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SectionDeductionServiceServer is the server API for SectionDeductionService service.
// All implementations must embed UnimplementedSectionDeductionServiceServer
// for forward compatibility
type SectionDeductionServiceServer interface {
	// 获取今日分时预约
	TodaySectionDeductionDetail(context.Context, *TodaySectionDeductionRequest) (*TodaySectionDeductionResponse, error)
	mustEmbedUnimplementedSectionDeductionServiceServer()
}

// UnimplementedSectionDeductionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSectionDeductionServiceServer struct {
}

func (UnimplementedSectionDeductionServiceServer) TodaySectionDeductionDetail(context.Context, *TodaySectionDeductionRequest) (*TodaySectionDeductionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TodaySectionDeductionDetail not implemented")
}
func (UnimplementedSectionDeductionServiceServer) mustEmbedUnimplementedSectionDeductionServiceServer() {
}

// UnsafeSectionDeductionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SectionDeductionServiceServer will
// result in compilation errors.
type UnsafeSectionDeductionServiceServer interface {
	mustEmbedUnimplementedSectionDeductionServiceServer()
}

func RegisterSectionDeductionServiceServer(s grpc.ServiceRegistrar, srv SectionDeductionServiceServer) {
	s.RegisterService(&SectionDeductionService_ServiceDesc, srv)
}

func _SectionDeductionService_TodaySectionDeductionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodaySectionDeductionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionDeductionServiceServer).TodaySectionDeductionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SectionDeductionService_TodaySectionDeductionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionDeductionServiceServer).TodaySectionDeductionDetail(ctx, req.(*TodaySectionDeductionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SectionDeductionService_ServiceDesc is the grpc.ServiceDesc for SectionDeductionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SectionDeductionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SectionDeductionService",
	HandlerType: (*SectionDeductionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TodaySectionDeductionDetail",
			Handler:    _SectionDeductionService_TodaySectionDeductionDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/odas/grpc/section/section.proto",
}
