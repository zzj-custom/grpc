// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: cmd/odas/grpc/product/product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductService_Rank_FullMethodName        = "/ProductService/Rank"
	ProductService_TicketList_FullMethodName  = "/ProductService/TicketList"
	ProductService_SalesDetail_FullMethodName = "/ProductService/SalesDetail"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	// 定义 Rank 方法 ， 接受 RankRequest 消息 ， 返回 RankResponse  消息
	Rank(ctx context.Context, in *RankRequest, opts ...grpc.CallOption) (*RankResponse, error)
	// 定义 TicketList 方法 ， 接受 TicketListRequest 消息 ， 返回 TicketListResponse  消息
	TicketList(ctx context.Context, in *ProductTicketListRequest, opts ...grpc.CallOption) (*ProductTicketListResponse, error)
	// 定义 SalesDetail 方法 ， 接受 SalesDetailRequest 消息 ， 返回 SalesDetailResponse  消息
	SalesDetail(ctx context.Context, in *SalesDetailRequest, opts ...grpc.CallOption) (*SalesDetailResponse, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) Rank(ctx context.Context, in *RankRequest, opts ...grpc.CallOption) (*RankResponse, error) {
	out := new(RankResponse)
	err := c.cc.Invoke(ctx, ProductService_Rank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) TicketList(ctx context.Context, in *ProductTicketListRequest, opts ...grpc.CallOption) (*ProductTicketListResponse, error) {
	out := new(ProductTicketListResponse)
	err := c.cc.Invoke(ctx, ProductService_TicketList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) SalesDetail(ctx context.Context, in *SalesDetailRequest, opts ...grpc.CallOption) (*SalesDetailResponse, error) {
	out := new(SalesDetailResponse)
	err := c.cc.Invoke(ctx, ProductService_SalesDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	// 定义 Rank 方法 ， 接受 RankRequest 消息 ， 返回 RankResponse  消息
	Rank(context.Context, *RankRequest) (*RankResponse, error)
	// 定义 TicketList 方法 ， 接受 TicketListRequest 消息 ， 返回 TicketListResponse  消息
	TicketList(context.Context, *ProductTicketListRequest) (*ProductTicketListResponse, error)
	// 定义 SalesDetail 方法 ， 接受 SalesDetailRequest 消息 ， 返回 SalesDetailResponse  消息
	SalesDetail(context.Context, *SalesDetailRequest) (*SalesDetailResponse, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) Rank(context.Context, *RankRequest) (*RankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rank not implemented")
}
func (UnimplementedProductServiceServer) TicketList(context.Context, *ProductTicketListRequest) (*ProductTicketListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketList not implemented")
}
func (UnimplementedProductServiceServer) SalesDetail(context.Context, *SalesDetailRequest) (*SalesDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SalesDetail not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_Rank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).Rank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_Rank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).Rank(ctx, req.(*RankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_TicketList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductTicketListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).TicketList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_TicketList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).TicketList(ctx, req.(*ProductTicketListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_SalesDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalesDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).SalesDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_SalesDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).SalesDetail(ctx, req.(*SalesDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rank",
			Handler:    _ProductService_Rank_Handler,
		},
		{
			MethodName: "TicketList",
			Handler:    _ProductService_TicketList_Handler,
		},
		{
			MethodName: "SalesDetail",
			Handler:    _ProductService_SalesDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/odas/grpc/product/product.proto",
}
