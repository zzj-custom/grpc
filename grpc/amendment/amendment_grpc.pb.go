// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: cmd/odas/grpc/amendment/amendment.proto

package amendment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AmendmentService_Operate_FullMethodName = "/AmendmentService/Operate"
	AmendmentService_Search_FullMethodName  = "/AmendmentService/Search"
	AmendmentService_Delete_FullMethodName  = "/AmendmentService/Delete"
)

// AmendmentServiceClient is the client API for AmendmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AmendmentServiceClient interface {
	// 操作优化客流
	Operate(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (*OperateResponse, error)
	// 查询优化客流
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// 删除优化客流
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type amendmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAmendmentServiceClient(cc grpc.ClientConnInterface) AmendmentServiceClient {
	return &amendmentServiceClient{cc}
}

func (c *amendmentServiceClient) Operate(ctx context.Context, in *OperateRequest, opts ...grpc.CallOption) (*OperateResponse, error) {
	out := new(OperateResponse)
	err := c.cc.Invoke(ctx, AmendmentService_Operate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amendmentServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, AmendmentService_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *amendmentServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, AmendmentService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AmendmentServiceServer is the server API for AmendmentService service.
// All implementations should embed UnimplementedAmendmentServiceServer
// for forward compatibility
type AmendmentServiceServer interface {
	// 操作优化客流
	Operate(context.Context, *OperateRequest) (*OperateResponse, error)
	// 查询优化客流
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// 删除优化客流
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

// UnimplementedAmendmentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAmendmentServiceServer struct {
}

func (UnimplementedAmendmentServiceServer) Operate(context.Context, *OperateRequest) (*OperateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Operate not implemented")
}
func (UnimplementedAmendmentServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedAmendmentServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeAmendmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AmendmentServiceServer will
// result in compilation errors.
type UnsafeAmendmentServiceServer interface {
	mustEmbedUnimplementedAmendmentServiceServer()
}

func RegisterAmendmentServiceServer(s grpc.ServiceRegistrar, srv AmendmentServiceServer) {
	s.RegisterService(&AmendmentService_ServiceDesc, srv)
}

func _AmendmentService_Operate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmendmentServiceServer).Operate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmendmentService_Operate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmendmentServiceServer).Operate(ctx, req.(*OperateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmendmentService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmendmentServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmendmentService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmendmentServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AmendmentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmendmentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AmendmentService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmendmentServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AmendmentService_ServiceDesc is the grpc.ServiceDesc for AmendmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AmendmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AmendmentService",
	HandlerType: (*AmendmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Operate",
			Handler:    _AmendmentService_Operate_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _AmendmentService_Search_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AmendmentService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/odas/grpc/amendment/amendment.proto",
}
