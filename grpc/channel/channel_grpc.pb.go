// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: cmd/odas/grpc/channel/channel.proto

package channel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	grpc1 "odas/cmd/odas/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChannelService_OrderChannel_FullMethodName             = "/ChannelService/OrderChannel"
	ChannelService_OrderFullChannel_FullMethodName         = "/ChannelService/OrderFullChannel"
	ChannelService_OTAChannelTicketSaleStat_FullMethodName = "/ChannelService/OTAChannelTicketSaleStat"
	ChannelService_TicketRefundRatio_FullMethodName        = "/ChannelService/TicketRefundRatio"
	ChannelService_OrderSecondaryChannel_FullMethodName    = "/ChannelService/OrderSecondaryChannel"
)

// ChannelServiceClient is the client API for ChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelServiceClient interface {
	// 分销渠道数据统计
	OrderChannel(ctx context.Context, in *grpc1.PassedTimeSpanByOrderTypeV4Request, opts ...grpc.CallOption) (*OrderChannelResponse, error)
	// 全渠道数据统计
	OrderFullChannel(ctx context.Context, in *OrderFullChannelRequest, opts ...grpc.CallOption) (*OrderFullChannelResponse, error)
	// OTA渠道票数据销售统计
	OTAChannelTicketSaleStat(ctx context.Context, in *OTAChannelTicketSaleStatRequest, opts ...grpc.CallOption) (*OTAChannelTicketSaleStatResponse, error)
	// 定义退票率
	TicketRefundRatio(ctx context.Context, in *TicketRefundRatioRequest, opts ...grpc.CallOption) (*TicketRefundRatioResponse, error)
	// 定义二级渠道订单数据
	OrderSecondaryChannel(ctx context.Context, in *OrderSecondaryChannelRequest, opts ...grpc.CallOption) (*OrderFullChannelResponse, error)
}

type channelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelServiceClient(cc grpc.ClientConnInterface) ChannelServiceClient {
	return &channelServiceClient{cc}
}

func (c *channelServiceClient) OrderChannel(ctx context.Context, in *grpc1.PassedTimeSpanByOrderTypeV4Request, opts ...grpc.CallOption) (*OrderChannelResponse, error) {
	out := new(OrderChannelResponse)
	err := c.cc.Invoke(ctx, ChannelService_OrderChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) OrderFullChannel(ctx context.Context, in *OrderFullChannelRequest, opts ...grpc.CallOption) (*OrderFullChannelResponse, error) {
	out := new(OrderFullChannelResponse)
	err := c.cc.Invoke(ctx, ChannelService_OrderFullChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) OTAChannelTicketSaleStat(ctx context.Context, in *OTAChannelTicketSaleStatRequest, opts ...grpc.CallOption) (*OTAChannelTicketSaleStatResponse, error) {
	out := new(OTAChannelTicketSaleStatResponse)
	err := c.cc.Invoke(ctx, ChannelService_OTAChannelTicketSaleStat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) TicketRefundRatio(ctx context.Context, in *TicketRefundRatioRequest, opts ...grpc.CallOption) (*TicketRefundRatioResponse, error) {
	out := new(TicketRefundRatioResponse)
	err := c.cc.Invoke(ctx, ChannelService_TicketRefundRatio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) OrderSecondaryChannel(ctx context.Context, in *OrderSecondaryChannelRequest, opts ...grpc.CallOption) (*OrderFullChannelResponse, error) {
	out := new(OrderFullChannelResponse)
	err := c.cc.Invoke(ctx, ChannelService_OrderSecondaryChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelServiceServer is the server API for ChannelService service.
// All implementations must embed UnimplementedChannelServiceServer
// for forward compatibility
type ChannelServiceServer interface {
	// 分销渠道数据统计
	OrderChannel(context.Context, *grpc1.PassedTimeSpanByOrderTypeV4Request) (*OrderChannelResponse, error)
	// 全渠道数据统计
	OrderFullChannel(context.Context, *OrderFullChannelRequest) (*OrderFullChannelResponse, error)
	// OTA渠道票数据销售统计
	OTAChannelTicketSaleStat(context.Context, *OTAChannelTicketSaleStatRequest) (*OTAChannelTicketSaleStatResponse, error)
	// 定义退票率
	TicketRefundRatio(context.Context, *TicketRefundRatioRequest) (*TicketRefundRatioResponse, error)
	// 定义二级渠道订单数据
	OrderSecondaryChannel(context.Context, *OrderSecondaryChannelRequest) (*OrderFullChannelResponse, error)
	mustEmbedUnimplementedChannelServiceServer()
}

// UnimplementedChannelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChannelServiceServer struct {
}

func (UnimplementedChannelServiceServer) OrderChannel(context.Context, *grpc1.PassedTimeSpanByOrderTypeV4Request) (*OrderChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderChannel not implemented")
}
func (UnimplementedChannelServiceServer) OrderFullChannel(context.Context, *OrderFullChannelRequest) (*OrderFullChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderFullChannel not implemented")
}
func (UnimplementedChannelServiceServer) OTAChannelTicketSaleStat(context.Context, *OTAChannelTicketSaleStatRequest) (*OTAChannelTicketSaleStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OTAChannelTicketSaleStat not implemented")
}
func (UnimplementedChannelServiceServer) TicketRefundRatio(context.Context, *TicketRefundRatioRequest) (*TicketRefundRatioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketRefundRatio not implemented")
}
func (UnimplementedChannelServiceServer) OrderSecondaryChannel(context.Context, *OrderSecondaryChannelRequest) (*OrderFullChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderSecondaryChannel not implemented")
}
func (UnimplementedChannelServiceServer) mustEmbedUnimplementedChannelServiceServer() {}

// UnsafeChannelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelServiceServer will
// result in compilation errors.
type UnsafeChannelServiceServer interface {
	mustEmbedUnimplementedChannelServiceServer()
}

func RegisterChannelServiceServer(s grpc.ServiceRegistrar, srv ChannelServiceServer) {
	s.RegisterService(&ChannelService_ServiceDesc, srv)
}

func _ChannelService_OrderChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.PassedTimeSpanByOrderTypeV4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).OrderChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_OrderChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).OrderChannel(ctx, req.(*grpc1.PassedTimeSpanByOrderTypeV4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_OrderFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderFullChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).OrderFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_OrderFullChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).OrderFullChannel(ctx, req.(*OrderFullChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_OTAChannelTicketSaleStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTAChannelTicketSaleStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).OTAChannelTicketSaleStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_OTAChannelTicketSaleStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).OTAChannelTicketSaleStat(ctx, req.(*OTAChannelTicketSaleStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_TicketRefundRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRefundRatioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).TicketRefundRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_TicketRefundRatio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).TicketRefundRatio(ctx, req.(*TicketRefundRatioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_OrderSecondaryChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderSecondaryChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).OrderSecondaryChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_OrderSecondaryChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).OrderSecondaryChannel(ctx, req.(*OrderSecondaryChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelService_ServiceDesc is the grpc.ServiceDesc for ChannelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChannelService",
	HandlerType: (*ChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderChannel",
			Handler:    _ChannelService_OrderChannel_Handler,
		},
		{
			MethodName: "OrderFullChannel",
			Handler:    _ChannelService_OrderFullChannel_Handler,
		},
		{
			MethodName: "OTAChannelTicketSaleStat",
			Handler:    _ChannelService_OTAChannelTicketSaleStat_Handler,
		},
		{
			MethodName: "TicketRefundRatio",
			Handler:    _ChannelService_TicketRefundRatio_Handler,
		},
		{
			MethodName: "OrderSecondaryChannel",
			Handler:    _ChannelService_OrderSecondaryChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/odas/grpc/channel/channel.proto",
}
