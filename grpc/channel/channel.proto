syntax = "proto3";

import "cmd/odas/grpc/common.proto";
//path 表示生成的go文件的存放地址，会自动生成目录的。
//name 表示生成的go文件所属的包名
option go_package = "odas/cmd/odas/grpc/channel;channel";

// 定义渠道服务
service ChannelService {
  // 分销渠道数据统计
  rpc OrderChannel(PassedTimeSpanByOrderTypeV4Request) returns (OrderChannelResponse){}

  // 全渠道数据统计
  rpc OrderFullChannel (OrderFullChannelRequest) returns (OrderFullChannelResponse) {}

  // OTA渠道票数据销售统计
  rpc OTAChannelTicketSaleStat(OTAChannelTicketSaleStatRequest) returns (OTAChannelTicketSaleStatResponse){}

  // 定义退票率
  rpc TicketRefundRatio(TicketRefundRatioRequest) returns (TicketRefundRatioResponse){}

  // 定义二级渠道订单数据
  rpc OrderSecondaryChannel(OrderSecondaryChannelRequest) returns (OrderFullChannelResponse){}
}

message ChannelSummary  {
    string channelName = 1;
    int64 tickets = 2;
    int64 amount = 3;
    double rate = 4;
}

message OrderChannelResponse {
 repeated ChannelSummary summary = 1;
}

message OrderFullChannelRequest {
    PassedTimeSpanByOrderTypeV4Request request = 1;
    int64 limit = 2;
}

message OrderFullChannelResponse {
  OrderChannelSummary total = 1;
  repeated OrderFullChannelList list = 2;
}

message OrderChannelSummary {
  int64 orderCount = 1;
  int64 ticketCount = 2;
  int64 amount = 3;
}

message ChannelData{
  int64 channelClassId = 1;
  string channelClassName = 2;
}

message OrderFullChannelList{
  ChannelData channel = 1;
  OrderChannelSummary summary = 3;
}

message OTAChannelTicketSaleStatRequest {
  PassedTimeSpanByOrderTypeV4Request request = 1;
  int64 limit = 2;
  bool excludePackageTicket = 3;
}

message OTAChannelTicketSaleStatItem {
  ChannelData channel = 1;
  int64 ticketId = 3;
  string ticketName = 4;
  OrderChannelSummary summary = 5;
}

message OTAChannelTicketSaleStatResponse {
  repeated OTAChannelTicketSaleStatItem list = 1;
}

message TicketRefundRatioRequest {
  PassedTimeSpanByOrderTypeV4Request request = 1;
  int64 channelType = 2;
}

message TicketRefundRatioResponse {
  TicketRefundRatioTotal total = 1;
  repeated TicketRefundRatioList list = 2;
}

message TicketRefundRatioTotal {
  int64 payTicketNum = 1;
  int64 cancelTicketNum = 2;
  int64 revokeTicketNum = 3;
  int64 afterSaleTicketNum = 4;
}

message TicketRefundRatioList {
  ChannelData channel = 1;
  TicketRefundRatioTotal total = 3;
}

message OrderSecondaryChannelRequest {
  PassedTimeSpanByOrderTypeV4Request request = 1;
  int64 limit = 2;
  int64 channelClassId = 3;
}