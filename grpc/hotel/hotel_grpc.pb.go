// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: cmd/odas/grpc/hotel/hotel.proto

package hotel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HotelService_RmSaleReportList_FullMethodName     = "/HotelService/RmSaleReportList"
	HotelService_RmSaleReportDateList_FullMethodName = "/HotelService/RmSaleReportDateList"
	HotelService_RevenueReportSummary_FullMethodName = "/HotelService/RevenueReportSummary"
	HotelService_Occupancy_FullMethodName            = "/HotelService/Occupancy"
	HotelService_RmOrderDateList_FullMethodName      = "/HotelService/RmOrderDateList"
)

// HotelServiceClient is the client API for HotelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotelServiceClient interface {
	// 按酒店区分指标数据
	RmSaleReportList(ctx context.Context, in *RmSaleReportListRequest, opts ...grpc.CallOption) (*RmSaleReportListResponse, error)
	// 酒店每日指标数据
	RmSaleReportDateList(ctx context.Context, in *RmSaleReportListRequest, opts ...grpc.CallOption) (*RmSaleReportDateListResponse, error)
	// 酒店预定来源统计
	RevenueReportSummary(ctx context.Context, in *RevenueReportSummaryRequest, opts ...grpc.CallOption) (*RevenueReportSummaryResponse, error)
	// 酒店入住人数
	Occupancy(ctx context.Context, in *OccupancyRequest, opts ...grpc.CallOption) (*OccupancyResponse, error)
	// 酒店订单统计数据
	RmOrderDateList(ctx context.Context, in *RmOrderDateListRequest, opts ...grpc.CallOption) (*RmOrderDateListResponse, error)
}

type hotelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelServiceClient(cc grpc.ClientConnInterface) HotelServiceClient {
	return &hotelServiceClient{cc}
}

func (c *hotelServiceClient) RmSaleReportList(ctx context.Context, in *RmSaleReportListRequest, opts ...grpc.CallOption) (*RmSaleReportListResponse, error) {
	out := new(RmSaleReportListResponse)
	err := c.cc.Invoke(ctx, HotelService_RmSaleReportList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) RmSaleReportDateList(ctx context.Context, in *RmSaleReportListRequest, opts ...grpc.CallOption) (*RmSaleReportDateListResponse, error) {
	out := new(RmSaleReportDateListResponse)
	err := c.cc.Invoke(ctx, HotelService_RmSaleReportDateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) RevenueReportSummary(ctx context.Context, in *RevenueReportSummaryRequest, opts ...grpc.CallOption) (*RevenueReportSummaryResponse, error) {
	out := new(RevenueReportSummaryResponse)
	err := c.cc.Invoke(ctx, HotelService_RevenueReportSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) Occupancy(ctx context.Context, in *OccupancyRequest, opts ...grpc.CallOption) (*OccupancyResponse, error) {
	out := new(OccupancyResponse)
	err := c.cc.Invoke(ctx, HotelService_Occupancy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) RmOrderDateList(ctx context.Context, in *RmOrderDateListRequest, opts ...grpc.CallOption) (*RmOrderDateListResponse, error) {
	out := new(RmOrderDateListResponse)
	err := c.cc.Invoke(ctx, HotelService_RmOrderDateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelServiceServer is the server API for HotelService service.
// All implementations must embed UnimplementedHotelServiceServer
// for forward compatibility
type HotelServiceServer interface {
	// 按酒店区分指标数据
	RmSaleReportList(context.Context, *RmSaleReportListRequest) (*RmSaleReportListResponse, error)
	// 酒店每日指标数据
	RmSaleReportDateList(context.Context, *RmSaleReportListRequest) (*RmSaleReportDateListResponse, error)
	// 酒店预定来源统计
	RevenueReportSummary(context.Context, *RevenueReportSummaryRequest) (*RevenueReportSummaryResponse, error)
	// 酒店入住人数
	Occupancy(context.Context, *OccupancyRequest) (*OccupancyResponse, error)
	// 酒店订单统计数据
	RmOrderDateList(context.Context, *RmOrderDateListRequest) (*RmOrderDateListResponse, error)
	mustEmbedUnimplementedHotelServiceServer()
}

// UnimplementedHotelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHotelServiceServer struct {
}

func (UnimplementedHotelServiceServer) RmSaleReportList(context.Context, *RmSaleReportListRequest) (*RmSaleReportListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmSaleReportList not implemented")
}
func (UnimplementedHotelServiceServer) RmSaleReportDateList(context.Context, *RmSaleReportListRequest) (*RmSaleReportDateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmSaleReportDateList not implemented")
}
func (UnimplementedHotelServiceServer) RevenueReportSummary(context.Context, *RevenueReportSummaryRequest) (*RevenueReportSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevenueReportSummary not implemented")
}
func (UnimplementedHotelServiceServer) Occupancy(context.Context, *OccupancyRequest) (*OccupancyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Occupancy not implemented")
}
func (UnimplementedHotelServiceServer) RmOrderDateList(context.Context, *RmOrderDateListRequest) (*RmOrderDateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmOrderDateList not implemented")
}
func (UnimplementedHotelServiceServer) mustEmbedUnimplementedHotelServiceServer() {}

// UnsafeHotelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelServiceServer will
// result in compilation errors.
type UnsafeHotelServiceServer interface {
	mustEmbedUnimplementedHotelServiceServer()
}

func RegisterHotelServiceServer(s grpc.ServiceRegistrar, srv HotelServiceServer) {
	s.RegisterService(&HotelService_ServiceDesc, srv)
}

func _HotelService_RmSaleReportList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmSaleReportListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).RmSaleReportList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_RmSaleReportList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).RmSaleReportList(ctx, req.(*RmSaleReportListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_RmSaleReportDateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmSaleReportListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).RmSaleReportDateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_RmSaleReportDateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).RmSaleReportDateList(ctx, req.(*RmSaleReportListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_RevenueReportSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevenueReportSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).RevenueReportSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_RevenueReportSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).RevenueReportSummary(ctx, req.(*RevenueReportSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_Occupancy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OccupancyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).Occupancy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_Occupancy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).Occupancy(ctx, req.(*OccupancyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_RmOrderDateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmOrderDateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).RmOrderDateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HotelService_RmOrderDateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).RmOrderDateList(ctx, req.(*RmOrderDateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HotelService_ServiceDesc is the grpc.ServiceDesc for HotelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HotelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HotelService",
	HandlerType: (*HotelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RmSaleReportList",
			Handler:    _HotelService_RmSaleReportList_Handler,
		},
		{
			MethodName: "RmSaleReportDateList",
			Handler:    _HotelService_RmSaleReportDateList_Handler,
		},
		{
			MethodName: "RevenueReportSummary",
			Handler:    _HotelService_RevenueReportSummary_Handler,
		},
		{
			MethodName: "Occupancy",
			Handler:    _HotelService_Occupancy_Handler,
		},
		{
			MethodName: "RmOrderDateList",
			Handler:    _HotelService_RmOrderDateList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/odas/grpc/hotel/hotel.proto",
}
