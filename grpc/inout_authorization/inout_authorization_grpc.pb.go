// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: cmd/odas/grpc/inout_authorization/inout_authorization.proto

package inout_authorization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InoutAuthorizationService_Create_FullMethodName = "/InoutAuthorizationService/Create"
	InoutAuthorizationService_Update_FullMethodName = "/InoutAuthorizationService/Update"
	InoutAuthorizationService_Delete_FullMethodName = "/InoutAuthorizationService/Delete"
	InoutAuthorizationService_List_FullMethodName   = "/InoutAuthorizationService/List"
)

// InoutAuthorizationServiceClient is the client API for InoutAuthorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InoutAuthorizationServiceClient interface {
	// 创建授权
	Create(ctx context.Context, in *InoutAuthorizationCreateRequest, opts ...grpc.CallOption) (*InoutAuthorizationResponse, error)
	// 编辑授权
	Update(ctx context.Context, in *InoutAuthorizationUpdateRequest, opts ...grpc.CallOption) (*InoutAuthorizationResponse, error)
	// 删除授权
	Delete(ctx context.Context, in *InoutAuthorizationDeleteRequest, opts ...grpc.CallOption) (*InoutAuthorizationResponse, error)
	// 查询授权
	List(ctx context.Context, in *InoutAuthorizationListRequest, opts ...grpc.CallOption) (*InoutAuthorizationListResponse, error)
}

type inoutAuthorizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInoutAuthorizationServiceClient(cc grpc.ClientConnInterface) InoutAuthorizationServiceClient {
	return &inoutAuthorizationServiceClient{cc}
}

func (c *inoutAuthorizationServiceClient) Create(ctx context.Context, in *InoutAuthorizationCreateRequest, opts ...grpc.CallOption) (*InoutAuthorizationResponse, error) {
	out := new(InoutAuthorizationResponse)
	err := c.cc.Invoke(ctx, InoutAuthorizationService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inoutAuthorizationServiceClient) Update(ctx context.Context, in *InoutAuthorizationUpdateRequest, opts ...grpc.CallOption) (*InoutAuthorizationResponse, error) {
	out := new(InoutAuthorizationResponse)
	err := c.cc.Invoke(ctx, InoutAuthorizationService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inoutAuthorizationServiceClient) Delete(ctx context.Context, in *InoutAuthorizationDeleteRequest, opts ...grpc.CallOption) (*InoutAuthorizationResponse, error) {
	out := new(InoutAuthorizationResponse)
	err := c.cc.Invoke(ctx, InoutAuthorizationService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inoutAuthorizationServiceClient) List(ctx context.Context, in *InoutAuthorizationListRequest, opts ...grpc.CallOption) (*InoutAuthorizationListResponse, error) {
	out := new(InoutAuthorizationListResponse)
	err := c.cc.Invoke(ctx, InoutAuthorizationService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InoutAuthorizationServiceServer is the server API for InoutAuthorizationService service.
// All implementations must embed UnimplementedInoutAuthorizationServiceServer
// for forward compatibility
type InoutAuthorizationServiceServer interface {
	// 创建授权
	Create(context.Context, *InoutAuthorizationCreateRequest) (*InoutAuthorizationResponse, error)
	// 编辑授权
	Update(context.Context, *InoutAuthorizationUpdateRequest) (*InoutAuthorizationResponse, error)
	// 删除授权
	Delete(context.Context, *InoutAuthorizationDeleteRequest) (*InoutAuthorizationResponse, error)
	// 查询授权
	List(context.Context, *InoutAuthorizationListRequest) (*InoutAuthorizationListResponse, error)
	mustEmbedUnimplementedInoutAuthorizationServiceServer()
}

// UnimplementedInoutAuthorizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInoutAuthorizationServiceServer struct {
}

func (UnimplementedInoutAuthorizationServiceServer) Create(context.Context, *InoutAuthorizationCreateRequest) (*InoutAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedInoutAuthorizationServiceServer) Update(context.Context, *InoutAuthorizationUpdateRequest) (*InoutAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedInoutAuthorizationServiceServer) Delete(context.Context, *InoutAuthorizationDeleteRequest) (*InoutAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedInoutAuthorizationServiceServer) List(context.Context, *InoutAuthorizationListRequest) (*InoutAuthorizationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedInoutAuthorizationServiceServer) mustEmbedUnimplementedInoutAuthorizationServiceServer() {
}

// UnsafeInoutAuthorizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InoutAuthorizationServiceServer will
// result in compilation errors.
type UnsafeInoutAuthorizationServiceServer interface {
	mustEmbedUnimplementedInoutAuthorizationServiceServer()
}

func RegisterInoutAuthorizationServiceServer(s grpc.ServiceRegistrar, srv InoutAuthorizationServiceServer) {
	s.RegisterService(&InoutAuthorizationService_ServiceDesc, srv)
}

func _InoutAuthorizationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InoutAuthorizationCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InoutAuthorizationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InoutAuthorizationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InoutAuthorizationServiceServer).Create(ctx, req.(*InoutAuthorizationCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InoutAuthorizationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InoutAuthorizationUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InoutAuthorizationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InoutAuthorizationService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InoutAuthorizationServiceServer).Update(ctx, req.(*InoutAuthorizationUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InoutAuthorizationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InoutAuthorizationDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InoutAuthorizationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InoutAuthorizationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InoutAuthorizationServiceServer).Delete(ctx, req.(*InoutAuthorizationDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InoutAuthorizationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InoutAuthorizationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InoutAuthorizationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InoutAuthorizationService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InoutAuthorizationServiceServer).List(ctx, req.(*InoutAuthorizationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InoutAuthorizationService_ServiceDesc is the grpc.ServiceDesc for InoutAuthorizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InoutAuthorizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InoutAuthorizationService",
	HandlerType: (*InoutAuthorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _InoutAuthorizationService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _InoutAuthorizationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InoutAuthorizationService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _InoutAuthorizationService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/odas/grpc/inout_authorization/inout_authorization.proto",
}
