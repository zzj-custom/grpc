// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: cmd/odas/grpc/park/park.proto

package park

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ParkService_Space_FullMethodName              = "/ParkService/Space"
	ParkService_InoutByHour_FullMethodName        = "/ParkService/InoutByHour"
	ParkService_InoutByLocation_FullMethodName    = "/ParkService/InoutByLocation"
	ParkService_InoutCompareByHour_FullMethodName = "/ParkService/InoutCompareByHour"
)

// ParkServiceClient is the client API for ParkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParkServiceClient interface {
	// 定义车位信息接口
	Space(ctx context.Context, in *SpaceRequest, opts ...grpc.CallOption) (*SpaceResponse, error)
	// 小时出入场数据
	InoutByHour(ctx context.Context, in *InoutByHourRequest, opts ...grpc.CallOption) (*InoutByHourResponse, error)
	// 省内外数据
	InoutByLocation(ctx context.Context, in *InoutByLocationRequest, opts ...grpc.CallOption) (*InoutByLocationResponse, error)
	// 小时出入场对比数据
	InoutCompareByHour(ctx context.Context, in *InoutCompareByHourRequest, opts ...grpc.CallOption) (*InoutCompareByHourResponse, error)
}

type parkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParkServiceClient(cc grpc.ClientConnInterface) ParkServiceClient {
	return &parkServiceClient{cc}
}

func (c *parkServiceClient) Space(ctx context.Context, in *SpaceRequest, opts ...grpc.CallOption) (*SpaceResponse, error) {
	out := new(SpaceResponse)
	err := c.cc.Invoke(ctx, ParkService_Space_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkServiceClient) InoutByHour(ctx context.Context, in *InoutByHourRequest, opts ...grpc.CallOption) (*InoutByHourResponse, error) {
	out := new(InoutByHourResponse)
	err := c.cc.Invoke(ctx, ParkService_InoutByHour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkServiceClient) InoutByLocation(ctx context.Context, in *InoutByLocationRequest, opts ...grpc.CallOption) (*InoutByLocationResponse, error) {
	out := new(InoutByLocationResponse)
	err := c.cc.Invoke(ctx, ParkService_InoutByLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkServiceClient) InoutCompareByHour(ctx context.Context, in *InoutCompareByHourRequest, opts ...grpc.CallOption) (*InoutCompareByHourResponse, error) {
	out := new(InoutCompareByHourResponse)
	err := c.cc.Invoke(ctx, ParkService_InoutCompareByHour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParkServiceServer is the server API for ParkService service.
// All implementations must embed UnimplementedParkServiceServer
// for forward compatibility
type ParkServiceServer interface {
	// 定义车位信息接口
	Space(context.Context, *SpaceRequest) (*SpaceResponse, error)
	// 小时出入场数据
	InoutByHour(context.Context, *InoutByHourRequest) (*InoutByHourResponse, error)
	// 省内外数据
	InoutByLocation(context.Context, *InoutByLocationRequest) (*InoutByLocationResponse, error)
	// 小时出入场对比数据
	InoutCompareByHour(context.Context, *InoutCompareByHourRequest) (*InoutCompareByHourResponse, error)
	mustEmbedUnimplementedParkServiceServer()
}

// UnimplementedParkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParkServiceServer struct {
}

func (UnimplementedParkServiceServer) Space(context.Context, *SpaceRequest) (*SpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Space not implemented")
}
func (UnimplementedParkServiceServer) InoutByHour(context.Context, *InoutByHourRequest) (*InoutByHourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InoutByHour not implemented")
}
func (UnimplementedParkServiceServer) InoutByLocation(context.Context, *InoutByLocationRequest) (*InoutByLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InoutByLocation not implemented")
}
func (UnimplementedParkServiceServer) InoutCompareByHour(context.Context, *InoutCompareByHourRequest) (*InoutCompareByHourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InoutCompareByHour not implemented")
}
func (UnimplementedParkServiceServer) mustEmbedUnimplementedParkServiceServer() {}

// UnsafeParkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParkServiceServer will
// result in compilation errors.
type UnsafeParkServiceServer interface {
	mustEmbedUnimplementedParkServiceServer()
}

func RegisterParkServiceServer(s grpc.ServiceRegistrar, srv ParkServiceServer) {
	s.RegisterService(&ParkService_ServiceDesc, srv)
}

func _ParkService_Space_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkServiceServer).Space(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkService_Space_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkServiceServer).Space(ctx, req.(*SpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkService_InoutByHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InoutByHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkServiceServer).InoutByHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkService_InoutByHour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkServiceServer).InoutByHour(ctx, req.(*InoutByHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkService_InoutByLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InoutByLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkServiceServer).InoutByLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkService_InoutByLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkServiceServer).InoutByLocation(ctx, req.(*InoutByLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkService_InoutCompareByHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InoutCompareByHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkServiceServer).InoutCompareByHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkService_InoutCompareByHour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkServiceServer).InoutCompareByHour(ctx, req.(*InoutCompareByHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParkService_ServiceDesc is the grpc.ServiceDesc for ParkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ParkService",
	HandlerType: (*ParkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Space",
			Handler:    _ParkService_Space_Handler,
		},
		{
			MethodName: "InoutByHour",
			Handler:    _ParkService_InoutByHour_Handler,
		},
		{
			MethodName: "InoutByLocation",
			Handler:    _ParkService_InoutByLocation_Handler,
		},
		{
			MethodName: "InoutCompareByHour",
			Handler:    _ParkService_InoutCompareByHour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/odas/grpc/park/park.proto",
}
