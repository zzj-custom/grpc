// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: cmd/odas/grpc/report/report.proto

package report

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	grpc1 "odas/cmd/odas/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReportService_VerifiedSummary_FullMethodName         = "/ReportService/VerifiedSummary"
	ReportService_DistributorOrderSummary_FullMethodName = "/ReportService/DistributorOrderSummary"
	ReportService_AnnualCardRank_FullMethodName          = "/ReportService/AnnualCardRank"
	ReportService_TerminalSummary_FullMethodName         = "/ReportService/TerminalSummary"
	ReportService_TicketList_FullMethodName              = "/ReportService/TicketList"
)

// ReportServiceClient is the client API for ReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportServiceClient interface {
	// 获取验证数
	VerifiedSummary(ctx context.Context, in *VerifiedSummaryRequest, opts ...grpc.CallOption) (*grpc1.OrderSummaryV4, error)
	// 获取时间段分销商分组的订单和验证数据
	DistributorOrderSummary(ctx context.Context, in *DistributorOrderSummaryRequest, opts ...grpc.CallOption) (*DistributorOrderSummaryResponse, error)
	// 获取年卡排行数据
	AnnualCardRank(ctx context.Context, in *AnnualCardRankRequest, opts ...grpc.CallOption) (*AnnualCardRankResponse, error)
	// 获取分终端数据
	TerminalSummary(ctx context.Context, in *AnnualCardRankRequest, opts ...grpc.CallOption) (*TerminalSummaryResponse, error)
	// 获取票数据列表的订单数据
	TicketList(ctx context.Context, in *ReportTicketListRequest, opts ...grpc.CallOption) (*ReportTicketListResponse, error)
}

type reportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportServiceClient(cc grpc.ClientConnInterface) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) VerifiedSummary(ctx context.Context, in *VerifiedSummaryRequest, opts ...grpc.CallOption) (*grpc1.OrderSummaryV4, error) {
	out := new(grpc1.OrderSummaryV4)
	err := c.cc.Invoke(ctx, ReportService_VerifiedSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) DistributorOrderSummary(ctx context.Context, in *DistributorOrderSummaryRequest, opts ...grpc.CallOption) (*DistributorOrderSummaryResponse, error) {
	out := new(DistributorOrderSummaryResponse)
	err := c.cc.Invoke(ctx, ReportService_DistributorOrderSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) AnnualCardRank(ctx context.Context, in *AnnualCardRankRequest, opts ...grpc.CallOption) (*AnnualCardRankResponse, error) {
	out := new(AnnualCardRankResponse)
	err := c.cc.Invoke(ctx, ReportService_AnnualCardRank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) TerminalSummary(ctx context.Context, in *AnnualCardRankRequest, opts ...grpc.CallOption) (*TerminalSummaryResponse, error) {
	out := new(TerminalSummaryResponse)
	err := c.cc.Invoke(ctx, ReportService_TerminalSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) TicketList(ctx context.Context, in *ReportTicketListRequest, opts ...grpc.CallOption) (*ReportTicketListResponse, error) {
	out := new(ReportTicketListResponse)
	err := c.cc.Invoke(ctx, ReportService_TicketList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportServiceServer is the server API for ReportService service.
// All implementations must embed UnimplementedReportServiceServer
// for forward compatibility
type ReportServiceServer interface {
	// 获取验证数
	VerifiedSummary(context.Context, *VerifiedSummaryRequest) (*grpc1.OrderSummaryV4, error)
	// 获取时间段分销商分组的订单和验证数据
	DistributorOrderSummary(context.Context, *DistributorOrderSummaryRequest) (*DistributorOrderSummaryResponse, error)
	// 获取年卡排行数据
	AnnualCardRank(context.Context, *AnnualCardRankRequest) (*AnnualCardRankResponse, error)
	// 获取分终端数据
	TerminalSummary(context.Context, *AnnualCardRankRequest) (*TerminalSummaryResponse, error)
	// 获取票数据列表的订单数据
	TicketList(context.Context, *ReportTicketListRequest) (*ReportTicketListResponse, error)
	mustEmbedUnimplementedReportServiceServer()
}

// UnimplementedReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReportServiceServer struct {
}

func (UnimplementedReportServiceServer) VerifiedSummary(context.Context, *VerifiedSummaryRequest) (*grpc1.OrderSummaryV4, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiedSummary not implemented")
}
func (UnimplementedReportServiceServer) DistributorOrderSummary(context.Context, *DistributorOrderSummaryRequest) (*DistributorOrderSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributorOrderSummary not implemented")
}
func (UnimplementedReportServiceServer) AnnualCardRank(context.Context, *AnnualCardRankRequest) (*AnnualCardRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnualCardRank not implemented")
}
func (UnimplementedReportServiceServer) TerminalSummary(context.Context, *AnnualCardRankRequest) (*TerminalSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminalSummary not implemented")
}
func (UnimplementedReportServiceServer) TicketList(context.Context, *ReportTicketListRequest) (*ReportTicketListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TicketList not implemented")
}
func (UnimplementedReportServiceServer) mustEmbedUnimplementedReportServiceServer() {}

// UnsafeReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportServiceServer will
// result in compilation errors.
type UnsafeReportServiceServer interface {
	mustEmbedUnimplementedReportServiceServer()
}

func RegisterReportServiceServer(s grpc.ServiceRegistrar, srv ReportServiceServer) {
	s.RegisterService(&ReportService_ServiceDesc, srv)
}

func _ReportService_VerifiedSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifiedSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).VerifiedSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_VerifiedSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).VerifiedSummary(ctx, req.(*VerifiedSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_DistributorOrderSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributorOrderSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).DistributorOrderSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_DistributorOrderSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).DistributorOrderSummary(ctx, req.(*DistributorOrderSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_AnnualCardRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnualCardRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).AnnualCardRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_AnnualCardRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).AnnualCardRank(ctx, req.(*AnnualCardRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_TerminalSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnualCardRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).TerminalSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_TerminalSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).TerminalSummary(ctx, req.(*AnnualCardRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_TicketList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTicketListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).TicketList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportService_TicketList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).TicketList(ctx, req.(*ReportTicketListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportService_ServiceDesc is the grpc.ServiceDesc for ReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifiedSummary",
			Handler:    _ReportService_VerifiedSummary_Handler,
		},
		{
			MethodName: "DistributorOrderSummary",
			Handler:    _ReportService_DistributorOrderSummary_Handler,
		},
		{
			MethodName: "AnnualCardRank",
			Handler:    _ReportService_AnnualCardRank_Handler,
		},
		{
			MethodName: "TerminalSummary",
			Handler:    _ReportService_TerminalSummary_Handler,
		},
		{
			MethodName: "TicketList",
			Handler:    _ReportService_TicketList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/odas/grpc/report/report.proto",
}
