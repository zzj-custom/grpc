// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: cmd/odas/grpc/order/order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	grpc1 "odas/cmd/odas/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderService_BookingOrderList_FullMethodName  = "/OrderService/BookingOrderList"
	OrderService_TeamOrder_FullMethodName         = "/OrderService/TeamOrder"
	OrderService_Summary_FullMethodName           = "/OrderService/Summary"
	OrderService_Hot_FullMethodName               = "/OrderService/Hot"
	OrderService_ToiSummary_FullMethodName        = "/OrderService/ToiSummary"
	OrderService_PreBookingByType_FullMethodName  = "/OrderService/PreBookingByType"
	OrderService_PreBookingSummary_FullMethodName = "/OrderService/PreBookingSummary"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	// 定义 BookingOrderList 方法，接受 PassedTimeSpanByLidAndSidV4Request 消息， 并返回BookingOrderListResponse消息
	BookingOrderList(ctx context.Context, in *grpc1.PassedTimeSpanByOrderTypeV4Request, opts ...grpc.CallOption) (*BookingOrderListResponse, error)
	// 定义 TeamOrder 方法，接受 TeamOrderRequest 消息， 并返回 TeamOrderResponse 消息
	TeamOrder(ctx context.Context, in *TeamOrderRequest, opts ...grpc.CallOption) (*TeamOrderResponse, error)
	// 定义 Summary 方法，接受 SummaryRequest 消息， 并返回 SummaryResponse 消息
	Summary(ctx context.Context, in *OrderSummaryRequest, opts ...grpc.CallOption) (*OrderSummaryResponse, error)
	// 定义 Hot 方法，接受 HotRequest 消息， 并返回 HotResponse 消息
	Hot(ctx context.Context, in *HotRequest, opts ...grpc.CallOption) (*HotResponse, error)
	// 定义 ToiSummary 方法，接受 PassedTimeSpanByLidAndSidV4Request 消息， 并返回 ToiSummaryResponse 消息
	ToiSummary(ctx context.Context, in *grpc1.PassedTimeSpanByOrderTypeV4Request, opts ...grpc.CallOption) (*ToiSummaryResponse, error)
	// 定义 PreBookingByType 方法，接受 PreBookingRequest 消息， 并返回 PreBookingByTypeResponse 消息
	PreBookingByType(ctx context.Context, in *grpc1.PassedTimeSpanByOrderTypeV4Request, opts ...grpc.CallOption) (*PreBookingByTypeResponse, error)
	// 定义 PreBookingSummary 方法，接受 PreBookingRequest 消息， 并返回 PreBookingSummaryResponse 消息
	PreBookingSummary(ctx context.Context, in *grpc1.PassedTimeSpanByOrderTypeV4Request, opts ...grpc.CallOption) (*PreBookingSummaryResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) BookingOrderList(ctx context.Context, in *grpc1.PassedTimeSpanByOrderTypeV4Request, opts ...grpc.CallOption) (*BookingOrderListResponse, error) {
	out := new(BookingOrderListResponse)
	err := c.cc.Invoke(ctx, OrderService_BookingOrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) TeamOrder(ctx context.Context, in *TeamOrderRequest, opts ...grpc.CallOption) (*TeamOrderResponse, error) {
	out := new(TeamOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_TeamOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Summary(ctx context.Context, in *OrderSummaryRequest, opts ...grpc.CallOption) (*OrderSummaryResponse, error) {
	out := new(OrderSummaryResponse)
	err := c.cc.Invoke(ctx, OrderService_Summary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Hot(ctx context.Context, in *HotRequest, opts ...grpc.CallOption) (*HotResponse, error) {
	out := new(HotResponse)
	err := c.cc.Invoke(ctx, OrderService_Hot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ToiSummary(ctx context.Context, in *grpc1.PassedTimeSpanByOrderTypeV4Request, opts ...grpc.CallOption) (*ToiSummaryResponse, error) {
	out := new(ToiSummaryResponse)
	err := c.cc.Invoke(ctx, OrderService_ToiSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) PreBookingByType(ctx context.Context, in *grpc1.PassedTimeSpanByOrderTypeV4Request, opts ...grpc.CallOption) (*PreBookingByTypeResponse, error) {
	out := new(PreBookingByTypeResponse)
	err := c.cc.Invoke(ctx, OrderService_PreBookingByType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) PreBookingSummary(ctx context.Context, in *grpc1.PassedTimeSpanByOrderTypeV4Request, opts ...grpc.CallOption) (*PreBookingSummaryResponse, error) {
	out := new(PreBookingSummaryResponse)
	err := c.cc.Invoke(ctx, OrderService_PreBookingSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	// 定义 BookingOrderList 方法，接受 PassedTimeSpanByLidAndSidV4Request 消息， 并返回BookingOrderListResponse消息
	BookingOrderList(context.Context, *grpc1.PassedTimeSpanByOrderTypeV4Request) (*BookingOrderListResponse, error)
	// 定义 TeamOrder 方法，接受 TeamOrderRequest 消息， 并返回 TeamOrderResponse 消息
	TeamOrder(context.Context, *TeamOrderRequest) (*TeamOrderResponse, error)
	// 定义 Summary 方法，接受 SummaryRequest 消息， 并返回 SummaryResponse 消息
	Summary(context.Context, *OrderSummaryRequest) (*OrderSummaryResponse, error)
	// 定义 Hot 方法，接受 HotRequest 消息， 并返回 HotResponse 消息
	Hot(context.Context, *HotRequest) (*HotResponse, error)
	// 定义 ToiSummary 方法，接受 PassedTimeSpanByLidAndSidV4Request 消息， 并返回 ToiSummaryResponse 消息
	ToiSummary(context.Context, *grpc1.PassedTimeSpanByOrderTypeV4Request) (*ToiSummaryResponse, error)
	// 定义 PreBookingByType 方法，接受 PreBookingRequest 消息， 并返回 PreBookingByTypeResponse 消息
	PreBookingByType(context.Context, *grpc1.PassedTimeSpanByOrderTypeV4Request) (*PreBookingByTypeResponse, error)
	// 定义 PreBookingSummary 方法，接受 PreBookingRequest 消息， 并返回 PreBookingSummaryResponse 消息
	PreBookingSummary(context.Context, *grpc1.PassedTimeSpanByOrderTypeV4Request) (*PreBookingSummaryResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) BookingOrderList(context.Context, *grpc1.PassedTimeSpanByOrderTypeV4Request) (*BookingOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingOrderList not implemented")
}
func (UnimplementedOrderServiceServer) TeamOrder(context.Context, *TeamOrderRequest) (*TeamOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamOrder not implemented")
}
func (UnimplementedOrderServiceServer) Summary(context.Context, *OrderSummaryRequest) (*OrderSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summary not implemented")
}
func (UnimplementedOrderServiceServer) Hot(context.Context, *HotRequest) (*HotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hot not implemented")
}
func (UnimplementedOrderServiceServer) ToiSummary(context.Context, *grpc1.PassedTimeSpanByOrderTypeV4Request) (*ToiSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToiSummary not implemented")
}
func (UnimplementedOrderServiceServer) PreBookingByType(context.Context, *grpc1.PassedTimeSpanByOrderTypeV4Request) (*PreBookingByTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreBookingByType not implemented")
}
func (UnimplementedOrderServiceServer) PreBookingSummary(context.Context, *grpc1.PassedTimeSpanByOrderTypeV4Request) (*PreBookingSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreBookingSummary not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_BookingOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.PassedTimeSpanByOrderTypeV4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).BookingOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_BookingOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).BookingOrderList(ctx, req.(*grpc1.PassedTimeSpanByOrderTypeV4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_TeamOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).TeamOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_TeamOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).TeamOrder(ctx, req.(*TeamOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Summary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Summary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_Summary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Summary(ctx, req.(*OrderSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Hot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Hot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_Hot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Hot(ctx, req.(*HotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ToiSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.PassedTimeSpanByOrderTypeV4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ToiSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ToiSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ToiSummary(ctx, req.(*grpc1.PassedTimeSpanByOrderTypeV4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_PreBookingByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.PassedTimeSpanByOrderTypeV4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).PreBookingByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_PreBookingByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).PreBookingByType(ctx, req.(*grpc1.PassedTimeSpanByOrderTypeV4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_PreBookingSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.PassedTimeSpanByOrderTypeV4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).PreBookingSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_PreBookingSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).PreBookingSummary(ctx, req.(*grpc1.PassedTimeSpanByOrderTypeV4Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookingOrderList",
			Handler:    _OrderService_BookingOrderList_Handler,
		},
		{
			MethodName: "TeamOrder",
			Handler:    _OrderService_TeamOrder_Handler,
		},
		{
			MethodName: "Summary",
			Handler:    _OrderService_Summary_Handler,
		},
		{
			MethodName: "Hot",
			Handler:    _OrderService_Hot_Handler,
		},
		{
			MethodName: "ToiSummary",
			Handler:    _OrderService_ToiSummary_Handler,
		},
		{
			MethodName: "PreBookingByType",
			Handler:    _OrderService_PreBookingByType_Handler,
		},
		{
			MethodName: "PreBookingSummary",
			Handler:    _OrderService_PreBookingSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/odas/grpc/order/order.proto",
}
